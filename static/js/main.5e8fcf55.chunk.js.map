{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["nums","ops","ids","7","8","9","4","5","6","1","2","3","0","App","state","lastPressed","undefined","currentNumber","prevNumber","operation","handleClick","e","calc","innerText","target","setState","evalued","math","split","slice","includes","initDisplay","lastNumberIdx","reverse","findIndex","char","length","this","className","id","map","op","key","onClick","num","data-action","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAIMA,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCC,EAAM,CAAC,IAAK,IAAK,IAAK,KACtBC,EAAM,CACVC,EAAG,QACHC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,QACHC,EAAG,OACH,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,OA8HQC,E,4MArHbC,MAAQ,CACNC,iBAAaC,EACbC,cAAe,IACfC,gBAAYF,EACZG,eAAWH,G,EAGbI,YAAc,SAACC,GAAO,IAAD,EAC0B,EAAKP,MAA1CQ,EADW,EACXA,KAAML,EADK,EACLA,cAAeF,EADV,EACUA,YACrBQ,EAAcF,EAAEG,OAAhBD,UAER,OAAQA,GACN,IAAK,KACH,EAAKE,SAAS,CACZR,cAAe,IACfK,UAAMN,IAER,MAEF,IAAK,IACH,IAAMU,EAAUC,IAAcL,GAC9B,EAAKG,SAAS,CACZR,cAAeS,EACfJ,KAAMI,IAER,MAEF,IAAK,IACcJ,EAAKM,MAAM,cACNC,OAAO,GAAG,GAEvBC,SAAS,MAChB,EAAKL,SAAS,CACZH,KAAMA,EAAK,IACXL,cAAeK,EAAK,MAGxB,MAEF,QACE,IAAIS,OAAcf,EAClB,GAAGf,EAAI6B,SAASP,GACd,GAAItB,EAAI6B,SAASf,IAA8B,MAAdQ,EAAoB,CACnD,IAAMS,EAAgBV,EAAKM,MAAM,IAAIK,UAAUC,WAAU,SAAAC,GAAI,MAAa,MAATA,GAAgBnC,EAAK8B,UAAUK,MAChGJ,EAAcT,EAAKO,MAAM,EAAGP,EAAKc,OAASJ,GAA5B,WAAiDT,EAAjD,UAEdQ,EAAW,UAAMT,EAAN,aAAeC,EAAf,UAGbQ,EACqB,MAAlBd,EAAyBM,EAAaN,EAAmBM,EAG9D,EAAKE,SAAS,CACZH,KAAMS,EACNd,cAAec,IAIrB,EAAKN,SAAS,CACZV,YAAaQ,K,uDAIP,IAAD,OACCN,EAAkBoB,KAAKvB,MAAvBG,cACR,OACE,yBAAKqB,UAAU,aACb,yBAAKA,UAAU,cACb,yBAAKC,GAAG,UAAUD,UAAU,uBACxBrB,GAEJ,yBAAKqB,UAAU,oBACZrC,EAAIuC,KAAI,SAACC,GAAD,OACP,4BACEH,UAAU,gBACVI,IAAKD,EACLE,QAAS,EAAKvB,YACdmB,GAAIrC,EAAIuC,IAEPA,MAIJzC,EAAKwC,KAAI,SAACI,GAAD,OACR,4BACEN,UAAU,GACVI,IAAKE,EACLD,QAAS,EAAKvB,YACdmB,GAAIrC,EAAI0C,IAEPA,MAGL,4BACEL,GAAG,UACHM,cAAY,UACZF,QAASN,KAAKjB,aAHhB,KAOA,4BAAQmB,GAAG,QAAQD,UAAU,YAAYK,QAASN,KAAKjB,aAAvD,MAGA,4BACEkB,UAAU,aACVC,GAAG,SACHI,QAASN,KAAKjB,aAHhB,Y,GA1GM0B,IAAMC,WCfJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e8fcf55.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport * as math from \"mathjs\";\n\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst ops = [\"/\", \"*\", \"-\", \"+\"];\nconst ids = {\n  7: \"seven\",\n  8: \"eight\",\n  9: \"nine\",\n  4: \"four\",\n  5: \"five\",\n  6: \"six\",\n  1: \"one\",\n  2: \"two\",\n  3: \"three\",\n  0: \"zero\",\n  \"/\": \"divide\",\n  \"*\": \"multiply\",\n  \"-\": \"subtract\",\n  \"+\": \"add\",\n};\n\n// const opsId = {\n  \n// };\n\nclass App extends React.Component {\n\n  state = {\n    lastPressed: undefined,\n    currentNumber: \"0\",\n    prevNumber: undefined,\n    operation: undefined\n  }\n\n  handleClick = (e) => {\n    const { calc, currentNumber, lastPressed } = this.state;\n    const { innerText } = e.target;\n\n    switch (innerText) {\n      case \"AC\": {\n        this.setState({\n          currentNumber: \"0\",\n          calc: undefined\n        })\n        break;\n      }\n      case \"=\": {\n        const evalued = math.evaluate(calc);\n        this.setState({\n          currentNumber: evalued,\n          calc: evalued\n        })\n        break;\n      }\n      case \".\": {\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n\n        if(!last.includes('.')) {\n          this.setState({\n            calc: calc+'.',\n            currentNumber: calc+'.'\n          })\n        }\n        break;\n      }\n      default: {\n        let initDisplay = undefined;\n        if(ops.includes(innerText)) {\n          if (ops.includes(lastPressed) && innerText !== '-' ) {\n            const lastNumberIdx = calc.split('').reverse().findIndex(char => char !== ' ' && nums.includes(+char));\n            initDisplay = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n          } else {\n            initDisplay = `${calc}  ${innerText} `;\n          }\n        } else {\n          initDisplay =\n            (currentNumber === \"0\") ? innerText : (currentNumber  +   innerText);\n        }\n\n        this.setState({\n          calc: initDisplay,\n          currentNumber: initDisplay\n        })\n      }\n    }\n    this.setState({\n      lastPressed: innerText\n    });\n  }\n\n  render() {\n    const { currentNumber } = this.state\n    return (\n      <div className=\"container\">\n        <div className=\"calculator\">\n          <div id=\"display\" className=\"calculator__display\">\n             {currentNumber}\n          </div>\n          <div className=\"calculator__keys\">\n            {ops.map((op) => (\n              <button\n                className=\"key--operator\"\n                key={op}\n                onClick={this.handleClick}\n                id={ids[op]}\n              >\n                {op}\n              </button>\n            ))}\n\n            {nums.map((num) => (\n              <button\n                className=\"\"\n                key={num}\n                onClick={this.handleClick}\n                id={ids[num]}\n              >\n                {num}\n              </button>\n            ))}\n            <button\n              id=\"decimal\"\n              data-action=\"decimal\"\n              onClick={this.handleClick}\n            >\n              .\n            </button>\n            <button id=\"clear\" className=\"clear-btn\" onClick={this.handleClick}>\n              AC\n            </button>\n            <button\n              className=\"key--equal\"\n              id=\"equals\"\n              onClick={this.handleClick}\n            >\n              =\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}